@page "/user/{userId}"
@inherits SecurePageBase
@rendermode InteractiveServer

@inject IAccountService AccountService

<Menu User="User" AuthStateProvider="AuthStateProvider" NavigationManager="NavigationManager" />
<div class="user-details">
    @if (userDetails == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <h1>@userDetails.UserName</h1>
		<p>Member since: @userDetails.Created.ToString("d")</p>

		@if (userDetails.Skills.Any())
		{
			<h2>Skills</h2>
			foreach (var skill in userDetails.Skills)
			{
				<!-- Give this some decent styling later on -->
				<p>@skill</p>
			}
		}

		@if (userDetails.Reviews.Any())
		{
			<h2>Reviews</h2>
			<ul class="review-list">
				@foreach (var review in userDetails.Reviews)
				{
					<ReviewCard review="@review" />
				}
			</ul>
		}

		@if (UserId.ToLower() != User.Claims.First(c => c.Type.Contains("nameidentifier")).Value.ToLower())
		{
			<button @onclick="AddReview">Add review</button>
		}

		<ReviewForm @ref="reviewForm" User="@User" RevieweeId="@UserId" UpdatePage="FetchUserDetails"/>
    }
</div>

@code {
	[Parameter]
	public string UserId { get; set; }

	private UserDetailsResponseDto userDetails { get; set; }

	private ReviewForm reviewForm;

	private bool _isUserLoaded;

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		await base.OnAfterRenderAsync(firstRender);
		
		if (firstRender && !_isUserLoaded)
		{
			_isUserLoaded = true;

			if (!string.IsNullOrEmpty(UserId))
			{
				await FetchUserDetails();
			}
		}
	}

	private async Task FetchUserDetails()
	{
		userDetails = await AccountService.GetUserDetailsAsync(Guid.Parse(UserId));
		StateHasChanged();
	}

	private async Task AddReview()
	{
		await reviewForm.Show();
	}
}
