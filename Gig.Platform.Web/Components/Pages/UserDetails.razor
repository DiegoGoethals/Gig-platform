@page "/user/{userId}"
@inherits SecurePageBase
@rendermode InteractiveServer

@inject IAccountService AccountService
@inject IReviewService ReviewService

<Header User="User" AuthStateProvider="AuthStateProvider" NavigationManager="NavigationManager" />

<div class="user-container">
    @if (userDetails == null)
    {
        <p>Loading...</p>
    }
    else
    {
        <div class="user-header">
            <h1>@userDetails.UserName</h1>
            <p class="member-since">Member since: @userDetails.Created.ToString("d")</p>

            @if (UserId.ToLower() != User.Claims.First(c => c.Type.Contains("nameidentifier")).Value.ToLower())
            {
                <a class="btn btn-primary" href="/chat/@UserId">Send Message</a>
            }            
        </div>

        @if (userDetails.Skills.Any())
        {
            <section class="user-skills">
                <h2>Skills</h2>
                <div class="skills-list">
                    @foreach (var skill in userDetails.Skills)
                    {
                        <p class="skill-item">@skill</p>
                    }
                </div>
            </section>
        }

        @if (userDetails.Reviews.Any())
        {
            <section class="user-reviews">
                <h2>Reviews</h2>
                <ul class="review-list">
                    @foreach (var review in userDetails.Reviews)
                    {
                        <ReviewCard review="@review" EditReview="EditReview" ReviewService="ReviewService" UpdatePage="FetchUserDetails" User="User"/>
                    }
                </ul>
            </section>
        }

        @if (UserId.ToLower() != User.Claims.First(c => c.Type.Contains("nameidentifier")).Value.ToLower() &&
        !userDetails.Reviews.Any(r => r.ReviewerId == Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value)))
        {
            <button class="btn btn-primary" @onclick="AddReview">Add review</button>
        }

        <ReviewForm @ref="reviewForm" User="@User" RevieweeId="@UserId" UpdatePage="FetchUserDetails" review="reviewToEdit" ReviewService="ReviewService"/>
    }
</div>

@code {
    [Parameter]
    public string UserId { get; set; }

    private UserDetailsResponseDto userDetails { get; set; }

	private ReviewResponseDto reviewToEdit { get; set; }

    private ReviewForm reviewForm;

    private bool _isUserLoaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && !_isUserLoaded)
        {
            _isUserLoaded = true;

            if (!string.IsNullOrEmpty(UserId))
            {
                await FetchUserDetails();
            }
        }
    }

    private async Task FetchUserDetails()
    {
        userDetails = await AccountService.GetUserDetailsAsync(Guid.Parse(UserId));
        StateHasChanged();
    }

    private async Task AddReview()
    {
        await reviewForm.Show();
    }

    private async Task EditReview(ReviewResponseDto reviewResponseDto) {
		reviewToEdit = reviewResponseDto;
		await reviewForm.Show();
    }
}
