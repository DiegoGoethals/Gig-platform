@page "/job/{jobId}"
@inherits SecurePageBase
@rendermode InteractiveServer

@inject IJobService JobService
@inject IApplicationService ApplicationService

@if (Job == null)
{
    <p>Loading...</p>
}
else
{
    <h1>@Job.Name</h1>
    <p>@Job.Description</p>

    @if (role == "Employee")
    {
        <div>
            <button class="btn btn-primary" @onclick="Apply">Apply</button>
        </div>
    }
    else {
        <ul>
		@foreach (var application in Applications)
		{
            <li>
			    <p>@application.CandidateName</p>
                <p>@application.ApplicationStatus</p>
                <div>
                    @foreach (var status in applicationStatuses) {
                            <button class="btn btn-primary" @onclick="() => HandleApplicationAsync(application.Id, status)">@status.Name</button>
					}
                </div>
            </li>
		}
        </ul>
    }
}

@code {
    [Parameter]
    public string JobId { get; set; }
	private string role { get; set; }

    private JobResponseDto Job { get; set; }
	private IEnumerable<ApplicationResponseDto> Applications { get; set; } = Enumerable.Empty<ApplicationResponseDto>();
    private IEnumerable<ApplicationStatusDto> applicationStatuses { get; set; } = Enumerable.Empty<ApplicationStatusDto>();

    private bool _isJobLoaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
		role = User.Claims.First(c => c.Type.Contains("role")).Value;

        if (firstRender && !_isJobLoaded)
        {
            _isJobLoaded = true;

            if (!string.IsNullOrEmpty(JobId))
            {
                Job = await JobService.GetJobByIdAsync(Guid.Parse(JobId));
                
				if (role != "Employee")
				{
					Applications = await ApplicationService.GetAllByJobAsync(Guid.Parse(JobId));
					applicationStatuses = await ApplicationService.GetAllStatusesAsync();
				}
                StateHasChanged();
            }
        }
    }

    private async Task Apply()
    {
		var dto = new ApplicationRequestDto
	    {
			JobId = Job.Id,
            CandidateId = Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value)
		};
		await ApplicationService.ApplyAsync(dto);
    }

    private async Task HandleApplicationAsync(Guid applicationId, ApplicationStatusDto status)
	{
		await ApplicationService.HandleApplicationAsync(applicationId, status);
		Applications = await ApplicationService.GetAllByJobAsync(Guid.Parse(JobId));
		StateHasChanged();
	}
}