@page "/job/{jobId}"
@inherits SecurePageBase
@rendermode InteractiveServer

@inject IJobService JobService
@inject IApplicationService ApplicationService

<Header User="User" AuthStateProvider="AuthStateProvider" NavigationManager="NavigationManager" />

<div class="job-details">
    @if (Job == null || _isLoading)
    {
        <Loader/>
    }
    else
    {
        <h1>@Job.Name</h1>
        <p>@translatedJobDescription</p>
        <p>@translatedSalaryText: €@Job.Salary</p>
        <p>@translatedAddressText: @Job.StreetName @Job.HouseNumber, @Job.PostalCode @Job.City</p>
        <p class="job-skills">
            @translatedSkillsText:
            @foreach (var skill in Job.Skills)
            {
                <span>@skill.Name</span>

                @((Job.Skills.Last() != skill) ? ", " : "")
            }
        </p>

        @if (role == "Employee" && Application == null)
        {
            <a href="user/@Job.EmployerId">@translatedEmployerText: @Job.EmployerName</a>
            <div>
                <button class="btn btn-primary" @onclick="Apply">@translatedApplyText</button>
            </div>
        }
        else if (role == "Employee" && Application != null)
        {
            <a href="user/@Job.EmployerId">@translatedEmployerText: @Job.EmployerName</a>
            <ApplicationCard role="@role" 
                application="Application" 
                applicationStatuses="applicationStatuses" 
                TranslationService="TranslationService"
                JSRuntime="JSRuntime" />
        }
        else
        {
            <button @onclick="ShowForm">@translatedEditJobText</button>
            <button class="btn btn-danger" @onclick="DeleteJob">@translatedDeleteJobText</button>
            <ul>
                @foreach (var application in Applications)
                {
                    <ApplicationCard application="application"
                    role="@role"
                    applicationStatuses="applicationStatuses"
                    OnHandleApplication="HandleApplicationAsync"
                    TranslationService="TranslationService"
                    JSRuntime="JSRuntime" />
                }
            </ul>

            <JobForm @ref="jobForm" OnEditJob="EditJob" job="Job" User="User" />
        }
    }
</div>

@code {
    [Parameter]
    public string JobId { get; set; }

    private string role { get; set; }

    private JobResponseDto Job { get; set; }
    private IEnumerable<ApplicationResponseDto> Applications { get; set; } = Enumerable.Empty<ApplicationResponseDto>();
    private IEnumerable<ApplicationStatusDto> applicationStatuses { get; set; } = Enumerable.Empty<ApplicationStatusDto>();
    private ApplicationResponseDto Application { get; set; }

    private bool _isJobLoaded;

    private JobForm jobForm;

    private bool _isLoading;

    private string translatedJobDescription;
    private string translatedSalaryText;
    private string translatedAddressText;
    private string translatedSkillsText;
    private string translatedEmployerText;
    private string translatedApplyText;
    private string translatedEditJobText;
    private string translatedDeleteJobText;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        role = User.Claims.First(c => c.Type.Contains("role")).Value;

        if (firstRender && !_isJobLoaded)
        {
            _isJobLoaded = true;

            if (!string.IsNullOrEmpty(JobId))
            {
                Job = await JobService.GetJobByIdAsync(Guid.Parse(JobId));

                if (role != "Employee")
                {
                    Applications = await ApplicationService.GetAllByJobAsync(Guid.Parse(JobId));
                    applicationStatuses = await ApplicationService.GetAllStatusesAsync();
                }
                else
                {
                    var allApplications = await ApplicationService.GetAllByJobAsync(Guid.Parse(JobId));
                    var candidateId = Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value);
                    Application = allApplications.FirstOrDefault(a => a.CandidateId == candidateId);
                }

                await LoadTranslations();

                StateHasChanged();
            }
        }
    }

    private async Task LoadTranslations()
    {
        _isLoading = true;
		StateHasChanged();

        var language = await JSRuntime.InvokeAsync<string>("getBrowserLanguage");
        language = language.Substring(0, 2).ToLower();

        translatedJobDescription = await TranslationService.TranslateAsync(Job.Description, language);
        translatedSalaryText = await TranslationService.TranslateAsync("Salary", language);
        translatedAddressText = await TranslationService.TranslateAsync("Address", language);
        translatedSkillsText = await TranslationService.TranslateAsync("Skills", language);
        translatedEmployerText = await TranslationService.TranslateAsync("Employer", language);
        translatedApplyText = await TranslationService.TranslateAsync("Apply", language);
        translatedEditJobText = await TranslationService.TranslateAsync("Edit details", language);
        translatedDeleteJobText = await TranslationService.TranslateAsync("Delete job", language);

        _isLoading = false;
        StateHasChanged();
    }

    private async Task ShowForm()
    {
        await jobForm.Show();
    }

    private async Task EditJob(JobRequestDto job)
    {
        try
        {
            await JobService.UpdateJobAsync(Guid.Parse(JobId), job);
            Job = await JobService.GetJobByIdAsync(Guid.Parse(JobId));
            await LoadTranslations();
            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error editing job: {ex.Message}");
        }
    }

    private async Task DeleteJob()
    {
        await JobService.DeleteJobAsync(Guid.Parse(JobId));
        NavigationManager.NavigateTo("/");
    }

    private async Task Apply()
    {
        var dto = new ApplicationRequestDto
            {
                JobId = Job.Id,
                CandidateId = Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value)
            };
        await ApplicationService.ApplyAsync(dto);
    }

    private async Task HandleApplicationAsync((Guid applicationId, ApplicationStatusDto status) args)
    {
        await ApplicationService.HandleApplicationAsync(args.applicationId, args.status);
        Applications = await ApplicationService.GetAllByJobAsync(Guid.Parse(JobId));
        StateHasChanged();
    }
}
