@page "/user-applications"
@rendermode InteractiveServer

@inherits SecurePageBase

@inject IApplicationService _applicationService

<Header User="User" AuthStateProvider="AuthStateProvider" NavigationManager="NavigationManager" />

<div class="applications-container">
	<ul class="applications">
		@foreach (var application in applications)
		{
			<li class="application-card">
				<a href="job/@application.JobId">@application.JobTitle</a>
                <p class="@(application.ApplicationStatus.ToLower())">
                    @(translatedStatuses.TryGetValue(application.ApplicationStatus, out var translated) ? translated : application.ApplicationStatus)
                </p>

			</li>
		}
	</ul>
</div>

@if (_isLoading)
{
	<Loader/>
}

@code {
    private IEnumerable<ApplicationResponseDto> applications { get; set; } = Enumerable.Empty<ApplicationResponseDto>();
    private Dictionary<string, string> translatedStatuses = new();
    private string _language;
    private bool _applicationsLoaded;
    private bool _isLoading;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && !_applicationsLoaded)
        {
            _applicationsLoaded = true;
            await FetchApplications();
        }
    }

    private async Task FetchApplications()
    {
        _isLoading = true;
        StateHasChanged();

        applications = await _applicationService.GetAllByCandidateAsync(Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value));

        _language = await JSRuntime.InvokeAsync<string>("getBrowserLanguage");
        _language = _language.Substring(0, 2).ToLower();

        await TranslateAllStatuses();

        _isLoading = false;
        StateHasChanged();
    }

    private async Task TranslateAllStatuses()
    {
        var uniqueStatuses = applications.Select(a => a.ApplicationStatus).Distinct();

        foreach (var status in uniqueStatuses)
        {
            translatedStatuses[status] = await TranslationService.TranslateAsync(status, _language);
        }
    }
}

