@page "/chat/{id:guid?}"
@rendermode InteractiveServer

@inherits SecurePageBase

@inject IChatService _chatService
@inject IAccountService _accountService
@inject TranslationService TranslationService

<Header User="User" AuthStateProvider="AuthStateProvider" NavigationManager="NavigationManager" />

@if (_isLoading)
{
    <Loader/>
}

<div class="chat-container">
    <!-- Sidebar: List of chats -->
    <div class="chat-sidebar">
        <h3>Chats</h3>
        <ul>
            @foreach (var chat in _chats)
            {
                <li @onclick="() => SelectChat(chat.UserId)" class="@(_selectedChat?.UserId == chat.UserId ? "active" : "")">
                    <div class="chat-item">
                        <strong>@chat.UserName</strong>
                        <p>@(chat.LastMessageSenderId == Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value) ? "You" : chat.UserName): @chat.LastMessage <span class="last-message-time">@chat.LastMessageDate.ToString("dd/MM/yy HH:mm")</span></p>
                    </div>
                </li>
            }
        </ul>
    </div>

    <!-- Main Chat Window -->
    <div class="chat-main">
        @if (_selectedChat != null)
        {
            <h3>@_selectedChat.UserName</h3>
            <div class="chat-messages">
                @foreach (var message in _messages)
                {
                    <div class="message @(message.SenderId == Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value) ? "sender" : "receiver")">
                        <p>@message.Content</p>
                        <p class="message-time">@message.Created.ToString("dd/MM/yy HH:mm")</p>
                    </div>
                }
            </div>
            <div class="chat-input">
                <input type="text" @bind="_newMessage.Content" placeholder="@translatedPlaceholder" />
                <button @onclick="SendMessageAsync">@translatedSend</button>
            </div>
        }
        else
        {
            <p>@translatedSelectChat</p>
        }
    </div>
</div>

@code {
    [Parameter]
    public Guid? id { get; set; }

    private IEnumerable<MessagePartnerDto> _chats = new List<MessagePartnerDto>();
    private MessagePartnerDto _selectedChat;
    private IEnumerable<MessageResponseDto> _messages = new List<MessageResponseDto>();
    private MessageRequestDto _newMessage = new MessageRequestDto();
    private bool _chatsLoaded;

    private bool _isLoading;

    private string translatedPlaceholder;
    private string translatedSend;
    private string translatedSelectChat;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && !_chatsLoaded)
        {
            _chatsLoaded = true;

            await FetchChatPartners();

			await LoadTranslations();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (id.HasValue)
        {
            if (_chats.Any(c => c.UserId == id.Value)) {
                _selectedChat = _chats.FirstOrDefault(c => c.UserId == id.Value);
            }
            else
            {
                var details = await _accountService.GetUserDetailsAsync(id.Value);
                _selectedChat = new MessagePartnerDto { UserId = details.Id, UserName = details.UserName };
                _chats.Append(_selectedChat);
            }
        }
    }

    private async Task FetchChatPartners()
    {
        var userId = Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value);
        _chats = await _chatService.GetChatPartnersAsync(userId);
        StateHasChanged();
    }

    private async Task FetchMessages()
    {
        var userId = Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value);
        if (_selectedChat != null)
        {
            _messages = await _chatService.GetConversationAsync(userId, _selectedChat.UserId);
            StateHasChanged();
        }
    }

    private async Task SendMessageAsync()
    {
        var userId = Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value);
        _newMessage.SenderId = userId;
        _newMessage.ReceiverId = _selectedChat?.UserId ?? Guid.Empty;
        await _chatService.SendMessageAsync(_newMessage);
        _newMessage.Content = string.Empty;
        await FetchMessages();
        await FetchChatPartners();
    }

    private async Task SelectChat(Guid chatId)
    {
        _selectedChat = _chats.FirstOrDefault(c => c.UserId == chatId);
        if (_selectedChat != null)
        {
            await FetchMessages();
        }
    }

    private async Task LoadTranslations()
    {
        _isLoading = true;
        StateHasChanged();

        var language = await JSRuntime.InvokeAsync<string>("getBrowserLanguage");
        language = language.Substring(0, 2).ToLower();

		translatedPlaceholder = await TranslationService.TranslateAsync("Type a message...", language);
		translatedSend = await TranslationService.TranslateAsync("Send", language);
		translatedSelectChat = await TranslationService.TranslateAsync("Please select a chat.", language);

		_isLoading = false;
		StateHasChanged();
	}
}
