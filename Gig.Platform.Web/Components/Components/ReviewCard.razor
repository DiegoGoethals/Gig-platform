<li class="review-card">
	<p class="reviewer-name">Reviewer: @review.ReviewerName</p>
	<p class="review-rating">Rating: @review.Rating</p>
	<p class="review-comment">@review.Comment</p>
	@if (review.ReviewerId == Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value))
	{
		<div class="review-btns">
			<svg @onclick="Edit" xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">
				<path fill="#000" d="M6 0L5 1l2 2l1-1zM4 2L0 6v2h2l4-4z" />
			</svg>
			<svg @onclick="Delete" xmlns="http://www.w3.org/2000/svg" width="8" height="8" viewBox="0 0 8 8">
				<path fill="#fb0202" d="M3 0c-.55 0-1 .45-1 1H1c-.55 0-1 .45-1 1h7c0-.55-.45-1-1-1H5c0-.55-.45-1-1-1zM1 3v4.81c0 .11.08.19.19.19h4.63c.11 0 .19-.08.19-.19V3h-1v3.5c0 .28-.22.5-.5.5s-.5-.22-.5-.5V3h-1v3.5c0 .28-.22.5-.5.5s-.5-.22-.5-.5V3h-1z" />
			</svg>
		</div>
	}
</li>

@code {
	[Parameter]
	public ReviewResponseDto review { get; set; }
	[Parameter]
	public EventCallback<ReviewResponseDto> EditReview { get; set; }
	[Parameter]
	public IReviewService ReviewService { get; set; }
	[Parameter]
	public EventCallback UpdatePage { get; set; }
	[Parameter]
	public ClaimsPrincipal User { get; set; }

	private async Task Edit()
	{
		await EditReview.InvokeAsync(review);
	}

	private async Task Delete()
	{
		await ReviewService.DeleteReviewAsync(review.Id);
		await UpdatePage.InvokeAsync();
	}
}
