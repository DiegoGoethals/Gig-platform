@using System.Security.Claims;

@inject IAccountService AccountService

@if (User?.Identity?.IsAuthenticated == true)
{
    <details class="profile-menu">
        <summary class="profile-summary">@User.Claims.FirstOrDefault(c => c.Type.Contains("name"))?.Value <img src="@userDetails.ProfilePictureUrl" alt="Profile picture" /></summary>
        <ul class="profile-options">
            <li><a href="/" class="profile-link">Home</a></li>
            <li><a href="/chat" class="profile-link">Messages</a></li>

            @if (User.Claims.FirstOrDefault(c => c.Type.Contains("role")).Value == "Employee")
            {
                <li><a href="/user-applications" class="profile-link">Applications</a></li>
            }

            <li><a href="/user/@User.Claims.First(c => c.Type.Contains("nameidentifier")).Value" class="profile-link">Profile</a></li>
            <li @onclick="Logout" class="logout-button">Logout</li>
        </ul>
    </details>
}

@code {
    [Parameter]
    public ClaimsPrincipal User { get; set; }
    [Parameter]
    public AuthenticationStateProvider AuthStateProvider { get; set; }
    [Parameter]
    public NavigationManager NavigationManager { get; set; }

	private UserDetailsResponseDto userDetails { get; set; } = new UserDetailsResponseDto();

    protected override async void OnParametersSet()
    {
        if (User == null)
        {
            User = new ClaimsPrincipal(new ClaimsIdentity());
        }
        else 
        {
			await FetchUserDetails();
        }
    }

    private async Task FetchUserDetails()
    {
		if (User.Claims.Any(c => c.Type.Contains("nameidentifier")))
		{
			userDetails = await AccountService.GetUserDetailsAsync(Guid.Parse(User.Claims.FirstOrDefault(c => c.Type.Contains("nameidentifier")).Value));
			StateHasChanged();
		}
    }

	private async Task Logout()
	{
        if (AuthStateProvider is CustomAuthenticationStateProvider customAuthStateProvider)
        {
            await customAuthStateProvider.LogoutAsync();
			NavigationManager.NavigateTo("/auth");
        }
	}
}
