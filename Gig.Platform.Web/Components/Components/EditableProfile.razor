@inject ISkillService SkillService

<div class="user-container">

    <div class="user-header">
        <div class="profile-picture-container">
            <img src="@userDetails.ProfilePictureUrl"
            alt="@userDetails.UserName profile picture"
            class="profile-picture"
            id="currentProfilePicture" />
            <InputFile OnChange="HandlePictureChange" class="upload-input" />
        </div>
        <h1>@userDetails.UserName</h1>
        <p class="member-since">Member since: @userDetails.Created.ToString("d")</p>
        <h3>Bio</h3>
        <input class="user-bio" type="text" required @bind="userDetails.Bio">
    </div>


    @if (Role == "Employee")
    {
        <label for="skills">Skills</label>
        <select id="skills" class="form-control mb-3 multi-select" multiple @onchange="HandleSkillsChange">
            @foreach (var skill in skills)
            {
                <option value="@skill.Name" selected="@SelectedSkills.Contains(skill.Name)">@skill.Name</option>
            }
        </select>
    }

    <div class="profile-buttons">
        <button class="btn btn-primary" @onclick="SaveChanges">Save Changes</button>
        <button class="btn btn-danger" @onclick="Cancel">Cancel</button>
    </div>

</div>

@if (_isLoading)
{
    <Loader/>
}

@code {
    [Parameter]
    public IAccountService AccountService { get; set; }
    [Parameter]
    public UserDetailsResponseDto userDetails { get; set; }
    [Parameter]
    public string UserId { get; set; }
    [Parameter]
	public string Role { get; set; }
    [Parameter]
	public EventCallback OnSave { get; set; }
    [Parameter]
	public EventCallback OnToggle { get; set; }

    private IEnumerable<SkillResponseDto> skills = Enumerable.Empty<SkillResponseDto>();

    private List<string> SelectedSkills { get; set; } = new List<string>();
    private byte[] FileData { get; set; }
    private string FileExtension { get; set; }

    private bool _isLoading = false;

    protected override async Task OnInitializedAsync()
    {
        skills = await SkillService.GetSkillsAsync();
		foreach (var skill in userDetails.Skills)
        {
			SelectedSkills.Add(skill);
        }
    }

    private void HandleSkillsChange(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        SelectedSkills = selectedOptions?.ToList() ?? new List<string>();
    }

    private async Task HandlePictureChange(InputFileChangeEventArgs e)
    {
        _isLoading = true;
		StateHasChanged();
        var file = e.File;
        if (file != null)
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(stream);
            FileData = stream.ToArray();
            FileExtension = Path.GetExtension(file.Name);
			userDetails.ProfilePictureUrl = $"data:image/{FileExtension};base64,{Convert.ToBase64String(FileData)}";
        }
        _isLoading = false;
		StateHasChanged();
    }

    private async Task SaveChanges()
    {
        _isLoading = true;
		StateHasChanged();
        var user = new RegistrationRequestDto
		{
			UserName = userDetails.UserName,
			Bio = userDetails.Bio,
			Skills = SelectedSkills,
            FileData = FileData,
            FileExtension = FileExtension
	    };
        await AccountService.UpdateUserDetailsAsync(Guid.Parse(UserId), user);
		_isLoading = false;
		await OnSave.InvokeAsync();
	}

    private async Task Cancel()
    {
		await OnToggle.InvokeAsync();

    }
}
