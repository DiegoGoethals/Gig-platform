@inject ISkillService SkillService

<div class="user-container">

    <div class="user-header">
        <div class="profile-picture-container">
            <img src="@userDetails.ProfilePictureUrl"
            alt="@userDetails.UserName profile picture"
            class="profile-picture"
            id="currentProfilePicture" />
            <InputFile OnChange="HandlePictureChange" class="upload-input" />
        </div>
        <h1>@userDetails.UserName</h1>
        <p class="member-since">Member since: @userDetails.Created.ToString("d")</p>
        @if (!string.IsNullOrEmpty(userDetails.Bio))
        {
            <h3>Bio</h3>
            <input class="user-bio" type="text" required @bind="userDetails.Bio">
        }
    </div>

    <label for="skills">Skills</label>
    <select id="skills" class="form-control mb-3 multi-select" multiple @onchange="HandleSkillsChange">
        @foreach (var skill in skills)
        {
            <option value="@skill.Name">@skill.Name</option>
        }
    </select>


    <div class="profile-buttons">
        <button class="btn btn-primary">Save Changes</button>
        <button class="btn btn-danger">Cancel</button>
    </div>

</div>

@code {
    [Parameter]
    public IAccountService AccountService { get; set; }
    [Parameter]
    public UserDetailsResponseDto userDetails { get; set; }
    [Parameter]
	public string UserId { get; set; }

    private IEnumerable<SkillResponseDto> skills = Enumerable.Empty<SkillResponseDto>();

    private List<string> SelectedSkills { get; set; } = new List<string>();
    private byte[] FileData { get; set; }
    private string FileExtension { get; set; }

    protected override async Task OnInitializedAsync()
    {
        skills = await SkillService.GetSkillsAsync();
    }

    private void HandleSkillsChange(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        SelectedSkills = selectedOptions?.ToList() ?? new List<string>();
    }

    private async Task HandlePictureChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {

            var buffer = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(buffer);

            FileData = buffer;
            FileExtension = Path.GetExtension(file.Name);
        }
	}

	private async Task SaveChanges()
	{
		var user = new RegistrationRequestDto
			{
				Bio = userDetails.Bio,
				Skills = SelectedSkills,
                FileData = FileData,
                FileExtension = FileExtension
			};
        await AccountService.UpdateUserDetailsAsync(Guid.Parse(UserId), user);
	}
}
