@inject ISkillService SkillService
@inject IAccountService AccountService
@inject NavigationManager NavigationManager

<div class="container">
    <form @onsubmit="Register">
        <div class="form-group">
            <label for="username">Username</label>
            <input type="text" class="form-control" id="username" placeholder="Username" required @bind="@Username">
        </div>
        <div class="form-group">
            <label for="email">@translatedEmail</label>
            <input type="email" class="form-control" id="email" placeholder="Enter email" required @bind="@Email">
        </div>
        <div class="form-group">
            <label for="password">@translatedPassword</label>
            <input type="password" class="form-control" id="password" placeholder="@translatedPassword" required @bind="@Password">
        </div>
        <div class="form-group">
            <label for="confirmPassword">@translatedConfirmPassword</label>
            <input type="password" class="form-control" id="confirmPassword" placeholder="@translatedConfirmPassword" required @bind="@ConfirmPassword">
        </div>
        <div class="form-group">
            <label for="firstname">@translatedFirstName</label>
            <input type="text" class="form-control" id="firstname" placeholder="@translatedFirstName" required @bind="@FirstName">
        </div>
        <div class="form-group">
            <label for="lastname">@translatedLastName</label>
            <input type="text" class="form-control" id="lastname" placeholder="@translatedLastName" required @bind="@LastName">
        </div>
        <div class="form-group">
            <label for="bio">Bio</label>
            <textarea class="form-control" id="bio" rows="3" required @bind="@Bio"></textarea>
        </div>
        <div class="form-group">
            <label for="birthday">@translatedBirthday</label>
            <input type="date" class="form-control" id="birthday" required @bind="@Birthday">
        </div>
        <div class="form-group">
            <label for="profilePicture">@translatedPicture</label>
            <InputFile OnChange="HandleFileSelected" class="form-control" id="profilePicture" accept="image/*" />
        </div>
        <div class="form-group">
            <label for="role">@translatedRole</label>
            <select id="role" class="form-control mb-3" required @bind="@Role">
                <option value="Employer">@translatedEmployer</option>
                <option value="Employee">@translatedEmployee</option>
            </select>
        </div>
        @if (Role == "Employee")
        {
            <div class="form-group">
                <label for="skills">Skills</label>
                <select id="skills" class="form-control mb-3 multi-select" multiple @onchange="HandleSkillsChange">
                    @foreach (var skill in skills)
                    {
                        <option value="@skill.Name">@skill.Name</option>
                    }
                </select>
            </div>
        }
        <button type="submit" class="btn btn-primary">@translatedRegister</button>
    </form>

    <p>@_errorMessage</p>

    @if (_isRegistring || _isLoading)
    {
        <Loader/>
    }

</div>

@code {
    [Parameter]
    public TranslationService TranslationService { get; set; }
    [Parameter]
    public IJSRuntime JSRuntime { get; set; }

    private IEnumerable<SkillResponseDto> skills = Enumerable.Empty<SkillResponseDto>();

    public string Username { get; set; }
    public string Email { get; set; }
    public string Password { get; set; }
    public string ConfirmPassword { get; set; }
    public string FirstName { get; set; }
    public string LastName { get; set; }
    public DateTime Birthday { get; set; } = DateTime.Now;
    public string Role { get; set; } = "Employer";
    public List<string> SelectedSkills { get; set; } = new List<string>();
    public byte[] FileData { get; set; }
    public string FileExtension { get; set; }
    public string Bio { get; set; }

    private string _errorMessage;
    private bool _isLoading;
    private bool _isRegistring = false;

    private string translatedEmail;
    private string translatedPassword;
    private string translatedConfirmPassword;
    private string translatedFirstName;
    private string translatedLastName;
    private string translatedBirthday;
    private string translatedPicture;
    private string translatedRole;
    private string translatedEmployer;
    private string translatedEmployee;
    private string translatedRegister;

    protected override async Task OnInitializedAsync()
    {
        skills = await SkillService.GetSkillsAsync();
		await LoadTranslations();
    }

    private void HandleSkillsChange(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        SelectedSkills = selectedOptions?.ToList() ?? new List<string>();
    }

    public async Task Register()
    {
        _isRegistring = true;

        var dto = new RegistrationRequestDto
            {
                UserName = Username,
                Email = Email,
                Password = Password,
                Firstname = FirstName,
                Lastname = LastName,
                Birthday = Birthday,
                Role = Role,
                Skills = SelectedSkills,
                FileData = FileData,
                FileExtension = FileExtension,
                Bio = Bio
            };

        if (Password != ConfirmPassword)
        {
            ShowErrorMessage("Passwords do not match.");
            _isRegistring = false;
            return;
        }

        try
        {
            var result = await AccountService.RegisterAsync(dto);

            NavigationManager.NavigateTo("/home");
        }
        catch (Exception ex)
        {
            ShowErrorMessage(ex.Message);
        }
        finally
        {
            _isRegistring = false;
        }
    }

    private void ShowErrorMessage(string message)
    {
        _errorMessage = message;
        StateHasChanged();
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            using var stream = new MemoryStream();
            await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(stream);
            FileData = stream.ToArray();
            FileExtension = Path.GetExtension(file.Name);
        }
    }

    private async Task LoadTranslations()
    {
        _isLoading = true;
		StateHasChanged();

		var language = await JSRuntime.InvokeAsync<string>("getBrowserLanguage");
		language = language.Substring(0, 2).ToLower();

		translatedEmail = await TranslationService.TranslateAsync("Email address", language);
		translatedPassword = await TranslationService.TranslateAsync("Password", language);
        translatedConfirmPassword = await TranslationService.TranslateAsync("Confirm Password", language);
        translatedFirstName = await TranslationService.TranslateAsync("First name", language);
        translatedLastName = await TranslationService.TranslateAsync("Last name", language);
		translatedBirthday = await TranslationService.TranslateAsync("Birthday", language);
		translatedPicture = await TranslationService.TranslateAsync("Profile Picture", language);
		translatedRole = await TranslationService.TranslateAsync("Role", language);
        translatedEmployer = await TranslationService.TranslateAsync("Employer", language);
		translatedEmployee = await TranslationService.TranslateAsync("Employee", language);
		translatedRegister = await TranslationService.TranslateAsync("Register", language);

        _isLoading = false;
		StateHasChanged();
    }
}
