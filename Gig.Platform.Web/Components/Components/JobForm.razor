@inject IJSRuntime JSRuntime
@inject ISkillService SkillService

<dialog @ref="dialog">
    <button @onclick="CloseDialog">X</button>
    <form @onsubmit="SubmitForm">
        <div class="form-group">
            <label for="name">Name</label>
            <input type="text" class="form-control" id="name" placeholder="Job name" required @bind="@job.Name">
        </div>
        <div class="form-group">
            <label for="description">Description</label>
            <textarea type="text" class="form-control" id="description" placeholder="Small job description" maxlength="100" required @bind="@job.Description" />
        </div>
        <div class="form-group">
            <label for="salary">Salary</label>
            <input type="number" class="form-control" id="salary" min="5" step="1" required @bind="@job.Salary">
        </div>
        <div class="form-group">
            <label for="skills">Skills</label>
            <select id="skills" class="form-control mb-3" multiple @onchange="HandleSkillsChange">
                @foreach (var skill in skills)
                {
                    <option value="@skill.Name">@skill.Name</option>
                }
            </select>
        </div>
        <div class="form-group">
            <label for="streetname">Street</label>
            <input type="text" class="form-control" id="streetname" placeholder="Street name" required @bind="@job.StreetName">
        </div>
        <div class="form-group">
            <label for="housenumber">House number</label>
            <input type="text" class="form-control" id="housenumber" placeholder="House number" required @bind="@job.HouseNumber">
        </div>
        <div class="form-group">
            <label for="postal">Postal code</label>
            <input type="text" class="form-control" id="postal" placeholder="Postal code" required @bind="@job.PostalCode">
        </div>
        <div class="form-group">
            <label for="city">City</label>
            <input type="text" class="form-control" id="city" placeholder="City" required @bind="@job.City">
        </div>
        <button type="submit" class="btn btn-primary">@(_isEditing ? "Edit Job" : "Add Job")</button>
    </form>
</dialog>

@code {
    [Parameter]
    public ClaimsPrincipal User { get; set; }
    [Parameter]
    public EventCallback<JobRequestDto> OnAddJob { get; set; }
    [Parameter]
    public EventCallback<JobRequestDto> OnEditJob { get; set; }
    [Parameter]
    public JobResponseDto job { get; set; }

    private IEnumerable<SkillResponseDto> skills = new List<SkillResponseDto>();
	private IEnumerable<string> SelectedSkills = new List<string>();

    private ElementReference dialog;

    private bool _isEditing;
    private bool _skillsLoaded;

    protected override async Task OnAfterRenderAsync(bool firstRender)
	{
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender && !_skillsLoaded)
        {
            _skillsLoaded = true;

            skills = await SkillService.GetSkillsAsync();
        }
	}

    protected override void OnParametersSet()
    {
        if (job != null && job.Id != Guid.Empty)
        {
            _isEditing = true;
        }
        else
        {
            _isEditing = false;
			job = new JobResponseDto();
        }
    }

    private void HandleSkillsChange(ChangeEventArgs e)
    {
        var selectedOptions = e.Value as IEnumerable<string>;
        SelectedSkills = selectedOptions?.ToList() ?? new List<string>();
    }

    private async Task SubmitForm() 
    {
        var dto = new JobRequestDto
            {
                Name = job.Name,
                Description = job.Description,
                Salary = job.Salary,
                Skills = SelectedSkills,
                StreetName = job.StreetName,
                HouseNumber = job.HouseNumber,
                PostalCode = job.PostalCode,
                City = job.City,
                EmployerId = Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value)
            };
		if (_isEditing)
		{
			await UpdateJob(dto);
		}
		else
		{
			await AddJob(dto);
		}
    }

    private async Task UpdateJob(JobRequestDto dto)
    {
		await OnEditJob.InvokeAsync(dto);
		await CloseDialog();
    }

    private async Task AddJob(JobRequestDto dto)
    {
        await OnAddJob.InvokeAsync(dto);
        await CloseDialog();
    }

    public async Task Show()
    {
        await JSRuntime.InvokeVoidAsync("openDialog", dialog);
    }

    private async Task CloseDialog()
    {
        await JSRuntime.InvokeVoidAsync("closeDialog", dialog);
    }
}
