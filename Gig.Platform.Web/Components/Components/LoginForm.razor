@inject IAccountService AccountService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

<div class="container">
	<form @onsubmit="Login">
		<div class="form-group">
			<label for="username">Username</label>
			<input type="text" class="form-control" id="username" placeholder="Username" required @bind="@Username">
		</div>
		<div class="form-group">
			<label for="password">Password</label>
			<input type="password" class="form-control" id="password" placeholder="Password" required @bind="@Password">
		</div>
		<button type="submit" class="btn btn-primary">Login</button>
	</form>

	<p>@_errorMessage</p>

	@if (_isLoggingIn)
	{
		<div class="loader">
			<span class="sr-only">Loading...</span>
		</div>
	}
</div>

@code {
	public string Username { get; set; }
	public string Password { get; set; }

	private string _errorMessage;
	private bool _isLoggingIn;

	private async Task Login()
	{
		_isLoggingIn = true;

		var dto = new AccountRequestDto
			{
				UserName = Username,
				Password = Password
			};

		try
		{
			var result = await AccountService.Login(dto);

			NavigationManager.NavigateTo("/");
		}
		catch (Exception ex)
		{
			ShowErrorMessage(ex.Message);
		}
		finally
		{
			_isLoggingIn = false;
		}
	}

	private void ShowErrorMessage(string message)
	{
		_errorMessage = message;
		StateHasChanged();
	}
}
