@inject IJobService JobService
@inject ILocationService LocationService

@if (Jobs == null || !Jobs.Any())
{
    <p>@translatedError</p>
}
else {
    <ul id="jobs">
        @foreach (var job in Jobs)
        {
            <JobCard User="User" Job="job" NavigationManager="NavigationManager" LocationService="LocationService" ApplicationService="ApplicationService" TranslationService="TranslationService" JSRuntime="JSRuntime"/>
        }
    </ul>
}

@if (_isLoading)
{
	<Loader />
}

<button class="btn btn-primary" @onclick="ShowForm">@translatedAddJob</button>

<JobForm @ref="jobForm" User="User" OnAddJob="AddJob"/>

@code {
    [Parameter]
    public ClaimsPrincipal User { get; set; }
    [Parameter]
    public NavigationManager NavigationManager { get; set; }
    [Parameter]
    public IApplicationService ApplicationService { get; set; }
    [Parameter]
    public TranslationService TranslationService { get; set; }
    [Parameter]
    public IJSRuntime JSRuntime { get; set; }

    private JobForm jobForm;

    private string translatedError;
    private string translatedAddJob;

	private bool _isLoading;

    private IEnumerable<JobResponseDto> Jobs { get; set; } = Enumerable.Empty<JobResponseDto>();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            if (User?.Claims == null || !User.Claims.Any(c => c.Type.Contains("nameidentifier")))
            {
                return;
            }

            var employerId = Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value);
            Jobs = await JobService.GetAllJobsByEmployerAsync(employerId);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching jobs: {ex.Message}");
            Jobs = Enumerable.Empty<JobResponseDto>();
        }

        await LoadTranslations();
    }

	private async Task AddJob(JobRequestDto job)
	{
        try
        {
            await JobService.AddJobAsync(job);
            Jobs = await JobService.GetAllJobsByEmployerAsync(Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value));
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error adding job: {ex.Message}");
        }
	}

    private async Task ShowForm()
    {
        await jobForm.Show();
    }

    private async Task LoadTranslations()
    {
        _isLoading = true;
		StateHasChanged();

        var language = await JSRuntime.InvokeAsync<string>("getBrowserLanguage");
        language = language.Substring(0, 2).ToLower();

        translatedError = await TranslationService.TranslateAsync("No jobs found", language);
        translatedAddJob = await TranslationService.TranslateAsync("Add new job", language);

        _isLoading = false;
		StateHasChanged();
    }
}
