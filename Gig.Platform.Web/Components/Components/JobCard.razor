<li id="@Job.Id" @onclick="SeeJobDetails">
	<h3>@Job.Name</h3>
	<p>@translatedSalary: @Job.Salary</p>
	<p>@translatedCity: @Job.City</p>
	<p>@translatedDistance: @distance Km</p>
	<p>@Applications.Count() @translatedApplications</p>
	@foreach (var skill in Job.Skills)
	{
		<p class="job-skill">@skill.Name</p>
	}
	@if (hasApplied)
	{
		<p class="job-applied">@translatedApplied</p>
	}
</li>

@if (_isLoading)
{
	<Loader />
}

@code {
	[Parameter]
	public JobResponseDto Job { get; set; }
	[Parameter]
	public NavigationManager NavigationManager { get; set; }
	[Parameter]
	public ILocationService LocationService { get; set; }
	[Parameter]
	public IApplicationService ApplicationService { get; set; }
	[Parameter]
	public ClaimsPrincipal User { get; set; }
	[Parameter]
	public TranslationService TranslationService { get; set; }
	[Parameter]
	public IJSRuntime JSRuntime { get; set; }

	private bool _isLoading;

	private string translatedSalary;
	private string translatedCity;
	private string translatedDistance;
	private string translatedApplications;
	private string translatedApplied;

	private IEnumerable<ApplicationResponseDto> Applications { get; set; } = Enumerable.Empty<ApplicationResponseDto>();

	private int distance { get; set; }
	private bool hasApplied { get; set; } = false;

	protected override async Task OnInitializedAsync()
	{
		var userLocation = LocationService.GetUserLocation();
		distance = LocationService.GetDistance(Job.Latitude, Job.Longitude);
		Applications = await ApplicationService.GetAllByJobAsync(Job.Id);
		hasApplied = Applications.Any(a => a.CandidateId == Guid.Parse(User.Claims.First(c => c.Type.Contains("nameidentifier")).Value));
		await LoadTranslations();
	}

	private void SeeJobDetails() {
		NavigationManager.NavigateTo($"/job/{Job.Id}");
	}

	private async Task LoadTranslations()
	{
		_isLoading = true;

		var language = await JSRuntime.InvokeAsync<string>("getBrowserLanguage");
		language = language.Substring(0, 2).ToLower();

		translatedSalary = await TranslationService.TranslateAsync("Salary", language);
		translatedCity = await TranslationService.TranslateAsync(Job.City, language);
		translatedDistance = await TranslationService.TranslateAsync("Distance", language);
		translatedApplications = await TranslationService.TranslateAsync("Applications", language);
		translatedApplied = await TranslationService.TranslateAsync("You have already applied for this job", language);

		_isLoading = false;
	}
}
