@inject IJobService JobService
@inject ILocationService LocationService

<div>
	<form @onsubmit="submitFilters">
		<select @onchange="OnChangeDistance">
			<option disabled selected value="6371">--Choose the maximum distance--</option>
			<option value="1">1 km</option>
			<option value="5">5 km</option>
			<option value="10">10 km</option>
			<option value="25">25 km</option>
			<option value="50">50 km</option>
			<option value="100">100 km</option>
		</select>
		<button type="submit">Apply filters</button>
	</form>
</div>

<ul id="jobs">
	@foreach (var job in Jobs)
	{
		<JobCard Job="job" NavigationManager="NavigationManager" LocationService="LocationService" />
	}
</ul>

@code {
	[Parameter]
	public NavigationManager NavigationManager { get; set; }

	private IEnumerable<JobResponseDto> Jobs { get; set; } = Enumerable.Empty<JobResponseDto>();

	private int Distance { get; set; }

	protected override async Task OnInitializedAsync()
	{
		Jobs = await JobService.GetAllJobsForEmployeesAsync();
	}

	private void OnChangeDistance(ChangeEventArgs e)
	{
		Distance = int.Parse(e.Value.ToString());
	}

	private async Task submitFilters()
	{
		var allJobs = await JobService.GetAllJobsForEmployeesAsync();
		Jobs = allJobs.Where(j => LocationService.GetDistance(j.Latitude, j.Longitude) <= Distance);
	}
}
