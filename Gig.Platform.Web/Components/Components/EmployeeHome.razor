@inject IJobService JobService
@inject ILocationService LocationService
@inject ISkillService SkillService

<div>
	<form @onsubmit="submitFilters">
		<select @onchange="OnChangeDistance">
			<option disabled selected>--Choose the maximum distance--</option>
			<option value="1">1 km</option>
			<option value="5">5 km</option>
			<option value="10">10 km</option>
			<option value="25">25 km</option>
			<option value="50">50 km</option>
			<option value="100">100 km</option>
		</select>
		<select @onchange="SelectSkills">
			<option disabled selected>--Choose the skill--</option>
			@foreach (var skill in skills)
			{
				<option value="@skill.Id">@skill.Name</option>
			}
		</select>
		<button type="submit">Apply filters</button>
	</form>
</div>

<ul id="jobs">
	@foreach (var job in Jobs)
	{
		<JobCard Job="job" NavigationManager="NavigationManager" LocationService="LocationService" />
	}
</ul>

@code {
	[Parameter]
	public NavigationManager NavigationManager { get; set; }

	private IEnumerable<JobResponseDto> Jobs { get; set; } = Enumerable.Empty<JobResponseDto>();
	private IEnumerable<SkillResponseDto> skills { get; set; } = Enumerable.Empty<SkillResponseDto>();

	private int Distance { get; set; }
	private IEnumerable<Guid> SelectedSkills { get; set; } = Enumerable.Empty<Guid>();

	protected override async Task OnInitializedAsync()
	{
		Jobs = await JobService.GetAllJobsForEmployeesAsync();
		skills = await SkillService.GetSkillsAsync();
	}

	private void OnChangeDistance(ChangeEventArgs e)
	{
		Distance = int.Parse(e.Value.ToString());
	}

	private void SelectSkills(ChangeEventArgs e)
	{
		SelectedSkills = e.Value.ToString().Split(',').Select(Guid.Parse);
	}

	private async Task submitFilters()
	{
		var allJobs = await JobService.GetAllJobsForEmployeesAsync();
		Jobs = allJobs.Where(j => LocationService.GetDistance(j.Latitude, j.Longitude) <= Distance &&
				j.Skills.Any(skill => SelectedSkills.Contains(skill.Id)));
	}
}
